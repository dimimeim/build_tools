From 06ee59d3f83fd7cb17c381223bcb1a404c179491 Mon Sep 17 00:00:00 2001
From: Ricardo Cerqueira <cyanogenmod@cerqueira.org>
Date: Fri, 23 Nov 2012 14:23:16 +0000
Subject: [PATCH] TEMPORARY: Reintroduce button-backlight (and respective
 inactivity timeout)

The power manager rewrite from Change I1d7a52e98f0449f76d70bf421f6a7f245957d1d7
completely removed support for control of the button backlights, which makes
all capacitive buttons out there stay dark. The commit message in that change
mentions it hasn't been implemented _yet_, so this fix should be temporary
until upstream does their own implementation

Change-Id: I6094c446e0b8c23f57d30652a3cbd35dee5e821a
---
 .../java/com/android/server/power/DisplayPowerController.java    | 1 +
 services/java/com/android/server/power/PowerManagerService.java  | 9 +++++++++
 2 files changed, 10 insertions(+)

diff --git a/services/java/com/android/server/power/DisplayPowerController.java b/services/java/com/android/server/power/DisplayPowerController.java
index 18b4335..5b32fd4 100644
--- a/services/java/com/android/server/power/DisplayPowerController.java
+++ frameworks/base/services/java/com/android/server/power/DisplayPowerController.java
@@ -783,6 +783,7 @@ private void setScreenOn(boolean on) {
             if (on) {
                 mNotifier.onScreenOn();
             } else {
+                mLights.getLight(LightsService.LIGHT_ID_BUTTONS).setBrightness(0);
                 mNotifier.onScreenOff();
             }
         }
diff --git a/services/java/com/android/server/power/PowerManagerService.java b/services/java/com/android/server/power/PowerManagerService.java
index d79e4f9..62876aa 100644
--- a/services/java/com/android/server/power/PowerManagerService.java
+++ frameworks/base/services/java/com/android/server/power/PowerManagerService.java
@@ -149,6 +149,7 @@
     // This is subtracted from the end of the screen off timeout so the
     // minimum screen off timeout should be longer than this.
     private static final int SCREEN_DIM_DURATION = 7 * 1000;
+    private static final int BUTTON_ON_DURATION = 5 * 1000;
 
     // The maximum screen dim time expressed as a ratio relative to the screen
     // off timeout.  If the screen off timeout is very short then we want the
@@ -182,6 +183,7 @@
     private SettingsObserver mSettingsObserver;
     private DreamManagerService mDreamManager;
     private LightsService.Light mAttentionLight;
+    private LightsService.Light mButtonsLight;
 
     private final Object mLock = new Object();
 
@@ -462,6 +464,7 @@ public void systemReady(TwilightService twilight, DreamManagerService dreamManag
                     mHandler);
             mSettingsObserver = new SettingsObserver(mHandler);
             mAttentionLight = mLightsService.getLight(LightsService.LIGHT_ID_ATTENTION);
+            mButtonsLight = mLightsService.getLight(LightsService.LIGHT_ID_BUTTONS);
 
             // Register for broadcasts from other components of the system.
             IntentFilter filter = new IntentFilter();
@@ -1445,6 +1448,12 @@
                     nextTimeout = mLastUserActivityTime
                             + screenOffTimeout - screenDimDuration;
                     if (now < nextTimeout) {
+                                               if (now > mLastUserActivityTime + BUTTON_ON_DURATION) {
+                            mButtonsLight.setBrightness(0);
+                        } else {
+                            mButtonsLight.setBrightness(mDisplayPowerRequest.screenBrightness);
+                            nextTimeout = now + BUTTON_ON_DURATION;
+                        }
                         if (mSystemReady && mButtonTimeout != 0){
                             if (now > mLastUserActivityTime + mButtonTimeout) {
                                 mDisplayPowerController.setButtonTimout(true);
-- 
1.9.3
